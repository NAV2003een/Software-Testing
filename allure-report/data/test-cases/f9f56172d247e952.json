{"uid":"f9f56172d247e952","name":"DemoQA Practice Form Automation Test","fullName":"test_demoqa_form#test_demoqa_form","historyId":"d213d1bbe7e5ae543d1b92e3e06766f9","time":{"start":1751623373023,"stop":1751623392500,"duration":19477},"description":"\nThis test:\n- Opens https://demoqa.com/automation-practice-form\n- Fills out form fields: first name, last name, email, number, DOB\n- Selects Male gender\n- Takes screenshots at key points\n","descriptionHtml":"<p>This test:</p>\n<ul>\n<li>Opens https://demoqa.com/automation-practice-form</li>\n<li>Fills out form fields: first name, last name, email, number, DOB</li>\n<li>Selects Male gender</li>\n<li>Takes screenshots at key points</li>\n</ul>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"gender-radio-1\" class=\"custom-control-label\">...</label> is not clickable at point (630, 498). Other element would receive the click: <div class=\"react-datepicker__week\">...</div>\n  (Session info: chrome=138.0.7204.50)\nStacktrace:\n\tGetHandleVerifier [0x0x904493+62419]\n\tGetHandleVerifier [0x0x9044d4+62484]\n\t(No symbol) [0x0x742133]\n\t(No symbol) [0x0x790c40]\n\t(No symbol) [0x0x78effa]\n\t(No symbol) [0x0x78cb57]\n\t(No symbol) [0x0x78be14]\n\t(No symbol) [0x0x7805c5]\n\t(No symbol) [0x0x7af46c]\n\t(No symbol) [0x0x780054]\n\t(No symbol) [0x0x7af6e4]\n\t(No symbol) [0x0x7d087a]\n\t(No symbol) [0x0x7af266]\n\t(No symbol) [0x0x77e852]\n\t(No symbol) [0x0x77f6f4]\n\tGetHandleVerifier [0x0xb74773+2619059]\n\tGetHandleVerifier [0x0xb6fb8a+2599626]\n\tGetHandleVerifier [0x0x92b03a+221050]\n\tGetHandleVerifier [0x0x91b2b8+156152]\n\tGetHandleVerifier [0x0x921c6d+183213]\n\tGetHandleVerifier [0x0x90c378+94904]\n\tGetHandleVerifier [0x0x90c502+95298]\n\tGetHandleVerifier [0x0x8f765a+9626]\n\tBaseThreadInitThunk [0x0x76725d49+25]\n\tRtlInitializeExceptionChain [0x0x77bad1ab+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]","statusTrace":"@allure.title(\"DemoQA Practice Form Automation Test\")\n    @allure.description(\"\"\"\n    This test:\n    - Opens https://demoqa.com/automation-practice-form\n    - Fills out form fields: first name, last name, email, number, DOB\n    - Selects Male gender\n    - Takes screenshots at key points\n    \"\"\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_demoqa_form():\n        with allure.step(\"Setup Chrome WebDriver\"):\n            service = Service(r\"C:\\Users\\HP\\Downloads\\chromedriver-win32\\chromedriver-win32\\chromedriver.exe\")\n            options = Options()\n            # Uncomment for headless mode:\n            # options.add_argument(\"--headless=new\")\n            driver = webdriver.Chrome(service=service, options=options)\n            driver.maximize_window()\n    \n        try:\n            with allure.step(\"Open DemoQA Automation Practice Form\"):\n                driver.get(\"https://demoqa.com/automation-practice-form\")\n                time.sleep(2)\n                _attach_screenshot(driver, \"Opened Practice Form\")\n    \n            with allure.step(\"Enter first name\"):\n                first_name = driver.find_element(By.XPATH, \"(//input[@type='text'])[1]\")\n                assert first_name.is_displayed(), \"First name field not found\"\n                first_name.send_keys(\"Vimal\")\n                time.sleep(1)\n    \n            with allure.step(\"Enter last name\"):\n                last_name = driver.find_element(By.XPATH, \"(//input[@type='text'])[2]\")\n                assert last_name.is_displayed(), \"Last name field not found\"\n                last_name.send_keys(\"raj\")\n                time.sleep(1)\n    \n            with allure.step(\"Enter email\"):\n                email = driver.find_element(By.XPATH, \"(//input[@type='text'])[3]\")\n                assert email.is_displayed(), \"Email field not found\"\n                email.send_keys(\"sjfniouef@fowi.com\")\n                time.sleep(1)\n    \n            with allure.step(\"Enter mobile number\"):\n                number = driver.find_element(By.XPATH, \"(//input[@type='text'])[4]\")\n                assert number.is_displayed(), \"Mobile number field not found\"\n                number.send_keys(\"6494987\")\n                time.sleep(1)\n    \n            with allure.step(\"Enter date of birth\"):\n                dob = driver.find_element(By.XPATH, \"(//input[@type='text'])[5]\")\n                assert dob.is_displayed(), \"DOB field not found\"\n                dob.clear()\n                dob.send_keys(\"27 Nov 2004\")\n                time.sleep(1)\n    \n            with allure.step(\"Select gender: Male\"):\n                male_label = driver.find_element(By.XPATH, \"//label[text()='Male']\")\n                assert male_label.is_displayed(), \"Male gender option not found\"\n>               male_label.click()\n\ntest_demoqa_form.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000274FC6CEC50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x77bad1ab+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"gender-radio-1\" class=\"custom-control-label\">...</label> is not clickable at point (630, 498). Other element would receive the click: <div class=\"react-datepicker__week\">...</div>\nE         (Session info: chrome=138.0.7204.50)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x904493+62419]\nE       \tGetHandleVerifier [0x0x9044d4+62484]\nE       \t(No symbol) [0x0x742133]\nE       \t(No symbol) [0x0x790c40]\nE       \t(No symbol) [0x0x78effa]\nE       \t(No symbol) [0x0x78cb57]\nE       \t(No symbol) [0x0x78be14]\nE       \t(No symbol) [0x0x7805c5]\nE       \t(No symbol) [0x0x7af46c]\nE       \t(No symbol) [0x0x780054]\nE       \t(No symbol) [0x0x7af6e4]\nE       \t(No symbol) [0x0x7d087a]\nE       \t(No symbol) [0x0x7af266]\nE       \t(No symbol) [0x0x77e852]\nE       \t(No symbol) [0x0x77f6f4]\nE       \tGetHandleVerifier [0x0xb74773+2619059]\nE       \tGetHandleVerifier [0x0xb6fb8a+2599626]\nE       \tGetHandleVerifier [0x0x92b03a+221050]\nE       \tGetHandleVerifier [0x0x91b2b8+156152]\nE       \tGetHandleVerifier [0x0x921c6d+183213]\nE       \tGetHandleVerifier [0x0x90c378+94904]\nE       \tGetHandleVerifier [0x0x90c502+95298]\nE       \tGetHandleVerifier [0x0x8f765a+9626]\nE       \tBaseThreadInitThunk [0x0x76725d49+25]\nE       \tRtlInitializeExceptionChain [0x0x77bad1ab+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"\nThis test:\n- Opens https://demoqa.com/automation-practice-form\n- Fills out form fields: first name, last name, email, number, DOB\n- Selects Male gender\n- Takes screenshots at key points\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"gender-radio-1\" class=\"custom-control-label\">...</label> is not clickable at point (630, 498). Other element would receive the click: <div class=\"react-datepicker__week\">...</div>\n  (Session info: chrome=138.0.7204.50)\nStacktrace:\n\tGetHandleVerifier [0x0x904493+62419]\n\tGetHandleVerifier [0x0x9044d4+62484]\n\t(No symbol) [0x0x742133]\n\t(No symbol) [0x0x790c40]\n\t(No symbol) [0x0x78effa]\n\t(No symbol) [0x0x78cb57]\n\t(No symbol) [0x0x78be14]\n\t(No symbol) [0x0x7805c5]\n\t(No symbol) [0x0x7af46c]\n\t(No symbol) [0x0x780054]\n\t(No symbol) [0x0x7af6e4]\n\t(No symbol) [0x0x7d087a]\n\t(No symbol) [0x0x7af266]\n\t(No symbol) [0x0x77e852]\n\t(No symbol) [0x0x77f6f4]\n\tGetHandleVerifier [0x0xb74773+2619059]\n\tGetHandleVerifier [0x0xb6fb8a+2599626]\n\tGetHandleVerifier [0x0x92b03a+221050]\n\tGetHandleVerifier [0x0x91b2b8+156152]\n\tGetHandleVerifier [0x0x921c6d+183213]\n\tGetHandleVerifier [0x0x90c378+94904]\n\tGetHandleVerifier [0x0x90c502+95298]\n\tGetHandleVerifier [0x0x8f765a+9626]\n\tBaseThreadInitThunk [0x0x76725d49+25]\n\tRtlInitializeExceptionChain [0x0x77bad1ab+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]","statusTrace":"@allure.title(\"DemoQA Practice Form Automation Test\")\n    @allure.description(\"\"\"\n    This test:\n    - Opens https://demoqa.com/automation-practice-form\n    - Fills out form fields: first name, last name, email, number, DOB\n    - Selects Male gender\n    - Takes screenshots at key points\n    \"\"\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_demoqa_form():\n        with allure.step(\"Setup Chrome WebDriver\"):\n            service = Service(r\"C:\\Users\\HP\\Downloads\\chromedriver-win32\\chromedriver-win32\\chromedriver.exe\")\n            options = Options()\n            # Uncomment for headless mode:\n            # options.add_argument(\"--headless=new\")\n            driver = webdriver.Chrome(service=service, options=options)\n            driver.maximize_window()\n    \n        try:\n            with allure.step(\"Open DemoQA Automation Practice Form\"):\n                driver.get(\"https://demoqa.com/automation-practice-form\")\n                time.sleep(2)\n                _attach_screenshot(driver, \"Opened Practice Form\")\n    \n            with allure.step(\"Enter first name\"):\n                first_name = driver.find_element(By.XPATH, \"(//input[@type='text'])[1]\")\n                assert first_name.is_displayed(), \"First name field not found\"\n                first_name.send_keys(\"Vimal\")\n                time.sleep(1)\n    \n            with allure.step(\"Enter last name\"):\n                last_name = driver.find_element(By.XPATH, \"(//input[@type='text'])[2]\")\n                assert last_name.is_displayed(), \"Last name field not found\"\n                last_name.send_keys(\"raj\")\n                time.sleep(1)\n    \n            with allure.step(\"Enter email\"):\n                email = driver.find_element(By.XPATH, \"(//input[@type='text'])[3]\")\n                assert email.is_displayed(), \"Email field not found\"\n                email.send_keys(\"sjfniouef@fowi.com\")\n                time.sleep(1)\n    \n            with allure.step(\"Enter mobile number\"):\n                number = driver.find_element(By.XPATH, \"(//input[@type='text'])[4]\")\n                assert number.is_displayed(), \"Mobile number field not found\"\n                number.send_keys(\"6494987\")\n                time.sleep(1)\n    \n            with allure.step(\"Enter date of birth\"):\n                dob = driver.find_element(By.XPATH, \"(//input[@type='text'])[5]\")\n                assert dob.is_displayed(), \"DOB field not found\"\n                dob.clear()\n                dob.send_keys(\"27 Nov 2004\")\n                time.sleep(1)\n    \n            with allure.step(\"Select gender: Male\"):\n                male_label = driver.find_element(By.XPATH, \"//label[text()='Male']\")\n                assert male_label.is_displayed(), \"Male gender option not found\"\n>               male_label.click()\n\ntest_demoqa_form.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000274FC6CEC50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x77bad1ab+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"gender-radio-1\" class=\"custom-control-label\">...</label> is not clickable at point (630, 498). Other element would receive the click: <div class=\"react-datepicker__week\">...</div>\nE         (Session info: chrome=138.0.7204.50)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x904493+62419]\nE       \tGetHandleVerifier [0x0x9044d4+62484]\nE       \t(No symbol) [0x0x742133]\nE       \t(No symbol) [0x0x790c40]\nE       \t(No symbol) [0x0x78effa]\nE       \t(No symbol) [0x0x78cb57]\nE       \t(No symbol) [0x0x78be14]\nE       \t(No symbol) [0x0x7805c5]\nE       \t(No symbol) [0x0x7af46c]\nE       \t(No symbol) [0x0x780054]\nE       \t(No symbol) [0x0x7af6e4]\nE       \t(No symbol) [0x0x7d087a]\nE       \t(No symbol) [0x0x7af266]\nE       \t(No symbol) [0x0x77e852]\nE       \t(No symbol) [0x0x77f6f4]\nE       \tGetHandleVerifier [0x0xb74773+2619059]\nE       \tGetHandleVerifier [0x0xb6fb8a+2599626]\nE       \tGetHandleVerifier [0x0x92b03a+221050]\nE       \tGetHandleVerifier [0x0x91b2b8+156152]\nE       \tGetHandleVerifier [0x0x921c6d+183213]\nE       \tGetHandleVerifier [0x0x90c378+94904]\nE       \tGetHandleVerifier [0x0x90c502+95298]\nE       \tGetHandleVerifier [0x0x8f765a+9626]\nE       \tBaseThreadInitThunk [0x0x76725d49+25]\nE       \tRtlInitializeExceptionChain [0x0x77bad1ab+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","steps":[{"name":"Setup Chrome WebDriver","time":{"start":1751623373025,"stop":1751623374768,"duration":1743},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Open DemoQA Automation Practice Form","time":{"start":1751623374768,"stop":1751623382348,"duration":7580},"status":"passed","steps":[],"attachments":[{"uid":"a3c115ca707b5e48","name":"Opened Practice Form","source":"a3c115ca707b5e48.png","type":"image/png","size":514802}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"attachmentStep":false,"hasContent":true},{"name":"Enter first name","time":{"start":1751623382349,"stop":1751623383527,"duration":1178},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Enter last name","time":{"start":1751623383527,"stop":1751623384691,"duration":1164},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Enter email","time":{"start":1751623384691,"stop":1751623385906,"duration":1215},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Enter mobile number","time":{"start":1751623385906,"stop":1751623387087,"duration":1181},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Enter date of birth","time":{"start":1751623387087,"stop":1751623388603,"duration":1516},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Select gender: Male","time":{"start":1751623388603,"stop":1751623389773,"duration":1170},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"gender-radio-1\" class=\"custom-control-label\">...</label> is not clickable at point (630, 498). Other element would receive the click: <div class=\"react-datepicker__week\">...</div>\n  (Session info: chrome=138.0.7204.50)\nStacktrace:\n\tGetHandleVerifier [0x0x904493+62419]\n\tGetHandleVerifier [0x0x9044d4+62484]\n\t(No symbol) [0x0x742133]\n\t(No symbol) [0x0x790c40]\n\t(No symbol) [0x0x78effa]\n\t(No symbol) [0x0x78cb57]\n\t(No symbol) [0x0x78be14]\n\t(No symbol) [0x0x7805c5]\n\t(No symbol) [0x0x7af46c]\n\t(No symbol) [0x0x780054]\n\t(No symbol) [0x0x7af6e4]\n\t(No symbol) [0x0x7d087a]\n\t(No symbol) [0x0x7af266]\n\t(No symbol) [0x0x77e852]\n\t(No symbol) [0x0x77f6f4]\n\tGetHandleVerifier [0x0xb74773+2619059]\n\tGetHandleVerifier [0x0xb6fb8a+2599626]\n\tGetHandleVerifier [0x0x92b03a+221050]\n\tGetHandleVerifier [0x0x91b2b8+156152]\n\tGetHandleVerifier [0x0x921c6d+183213]\n\tGetHandleVerifier [0x0x90c378+94904]\n\tGetHandleVerifier [0x0x90c502+95298]\n\tGetHandleVerifier [0x0x8f765a+9626]\n\tBaseThreadInitThunk [0x0x76725d49+25]\n\tRtlInitializeExceptionChain [0x0x77bad1ab+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]\n\n","statusTrace":"  File \"C:\\Users\\HP\\Downloads\\New folder\\test_demoqa_form.py\", line 68, in test_demoqa_form\n    male_label.click()\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 121, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 574, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":true},{"name":"Close browser","time":{"start":1751623389852,"stop":1751623392500,"duration":2648},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":9,"attachmentStep":false,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"suite","value":"test_demoqa_form"},{"name":"host","value":"GP"},{"name":"thread","value":"14528-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_demoqa_form"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"f9f56172d247e952.json","parameterValues":[]}
{"uid":"7ac961872d8ef175","name":"JQuery Drag and Drop Test","fullName":"test_dragdrop#test_drag_and_drop","historyId":"b822f887931081a6c1abc39849b61568","time":{"start":1751621208021,"stop":1751621213242,"duration":5221},"description":"\nTest performing drag-and-drop on https://jqueryui.com/droppable/\n- Navigate to page\n- Switch to iframe\n- Drag the draggable box into droppable box\n- Verify successful drop\n","descriptionHtml":"<p>Test performing drag-and-drop on https://jqueryui.com/droppable/</p>\n<ul>\n<li>Navigate to page</li>\n<li>Switch to iframe</li>\n<li>Drag the draggable box into droppable box</li>\n<li>Verify successful drop</li>\n</ul>\n","status":"broken","statusMessage":"selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\n  (Session info: chrome=138.0.7204.50)\nStacktrace:\n\tGetHandleVerifier [0x0x904493+62419]\n\tGetHandleVerifier [0x0x9044d4+62484]\n\t(No symbol) [0x0x741f90]\n\t(No symbol) [0x0x7d8f51]\n\t(No symbol) [0x0x7af46c]\n\t(No symbol) [0x0x7d087a]\n\t(No symbol) [0x0x7af266]\n\t(No symbol) [0x0x77e852]\n\t(No symbol) [0x0x77f6f4]\n\tGetHandleVerifier [0x0xb74773+2619059]\n\tGetHandleVerifier [0x0xb6fb8a+2599626]\n\tGetHandleVerifier [0x0x92b03a+221050]\n\tGetHandleVerifier [0x0x91b2b8+156152]\n\tGetHandleVerifier [0x0x921c6d+183213]\n\tGetHandleVerifier [0x0x90c378+94904]\n\tGetHandleVerifier [0x0x90c502+95298]\n\tGetHandleVerifier [0x0x8f765a+9626]\n\tBaseThreadInitThunk [0x0x76725d49+25]\n\tRtlInitializeExceptionChain [0x0x77bad1ab+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]","statusTrace":"@allure.title(\"JQuery Drag and Drop Test\")\n    @allure.description(\"\"\"\n    Test performing drag-and-drop on https://jqueryui.com/droppable/\n    - Navigate to page\n    - Switch to iframe\n    - Drag the draggable box into droppable box\n    - Verify successful drop\n    \"\"\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_drag_and_drop():\n    \n        with allure.step(\"Setup Chrome WebDriver\"):\n            # âœ… replace this path with your own chromedriver path if needed\n            service = Service(r\"C:\\Users\\HP\\Downloads\\chromedriver-win32\\chromedriver-win32\\chromedriver.exe\")\n            options = Options()\n            options.add_argument(\"--headless=new\")  # remove this if you want to see the browser\n            driver = webdriver.Chrome(service=service, options=options)\n    \n        try:\n            with allure.step(\"Open jQuery UI Droppable page\"):\n                driver.maximize_window()\n                driver.get(\"https://jqueryui.com/droppable/\")\n                allure.attach(driver.title, name=\"Page Title\", attachment_type=allure.attachment_type.TEXT)\n                _attach_screenshot(driver, \"Initial Page\")\n    \n            with allure.step(\"Switch to iframe containing draggable elements\"):\n                iframe = driver.find_element(By.CLASS_NAME, \"demo-frame\")\n                driver.switch_to.frame(iframe)\n    \n            with allure.step(\"Locate draggable and droppable elements\"):\n                source = driver.find_element(By.ID, \"draggable\")\n                target = driver.find_element(By.ID, \"droppable\")\n    \n            with allure.step(\"Perform drag and drop action\"):\n                actions = ActionChains(driver)\n>               actions.drag_and_drop(source, target).perform()\n\ntest_dragdrop.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:93: in perform\n    self.w3c_actions.perform()\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:168: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001767CA4F290>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"move target out of bounds\",\"message\":\"move target out of bounds\\\\n  (Sess...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x77bad1ab+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\nE         (Session info: chrome=138.0.7204.50)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x904493+62419]\nE       \tGetHandleVerifier [0x0x9044d4+62484]\nE       \t(No symbol) [0x0x741f90]\nE       \t(No symbol) [0x0x7d8f51]\nE       \t(No symbol) [0x0x7af46c]\nE       \t(No symbol) [0x0x7d087a]\nE       \t(No symbol) [0x0x7af266]\nE       \t(No symbol) [0x0x77e852]\nE       \t(No symbol) [0x0x77f6f4]\nE       \tGetHandleVerifier [0x0xb74773+2619059]\nE       \tGetHandleVerifier [0x0xb6fb8a+2599626]\nE       \tGetHandleVerifier [0x0x92b03a+221050]\nE       \tGetHandleVerifier [0x0x91b2b8+156152]\nE       \tGetHandleVerifier [0x0x921c6d+183213]\nE       \tGetHandleVerifier [0x0x90c378+94904]\nE       \tGetHandleVerifier [0x0x90c502+95298]\nE       \tGetHandleVerifier [0x0x8f765a+9626]\nE       \tBaseThreadInitThunk [0x0x76725d49+25]\nE       \tRtlInitializeExceptionChain [0x0x77bad1ab+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: MoveTargetOutOfBoundsException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"\nTest performing drag-and-drop on https://jqueryui.com/droppable/\n- Navigate to page\n- Switch to iframe\n- Drag the draggable box into droppable box\n- Verify successful drop\n","status":"broken","statusMessage":"selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\n  (Session info: chrome=138.0.7204.50)\nStacktrace:\n\tGetHandleVerifier [0x0x904493+62419]\n\tGetHandleVerifier [0x0x9044d4+62484]\n\t(No symbol) [0x0x741f90]\n\t(No symbol) [0x0x7d8f51]\n\t(No symbol) [0x0x7af46c]\n\t(No symbol) [0x0x7d087a]\n\t(No symbol) [0x0x7af266]\n\t(No symbol) [0x0x77e852]\n\t(No symbol) [0x0x77f6f4]\n\tGetHandleVerifier [0x0xb74773+2619059]\n\tGetHandleVerifier [0x0xb6fb8a+2599626]\n\tGetHandleVerifier [0x0x92b03a+221050]\n\tGetHandleVerifier [0x0x91b2b8+156152]\n\tGetHandleVerifier [0x0x921c6d+183213]\n\tGetHandleVerifier [0x0x90c378+94904]\n\tGetHandleVerifier [0x0x90c502+95298]\n\tGetHandleVerifier [0x0x8f765a+9626]\n\tBaseThreadInitThunk [0x0x76725d49+25]\n\tRtlInitializeExceptionChain [0x0x77bad1ab+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]","statusTrace":"@allure.title(\"JQuery Drag and Drop Test\")\n    @allure.description(\"\"\"\n    Test performing drag-and-drop on https://jqueryui.com/droppable/\n    - Navigate to page\n    - Switch to iframe\n    - Drag the draggable box into droppable box\n    - Verify successful drop\n    \"\"\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_drag_and_drop():\n    \n        with allure.step(\"Setup Chrome WebDriver\"):\n            # âœ… replace this path with your own chromedriver path if needed\n            service = Service(r\"C:\\Users\\HP\\Downloads\\chromedriver-win32\\chromedriver-win32\\chromedriver.exe\")\n            options = Options()\n            options.add_argument(\"--headless=new\")  # remove this if you want to see the browser\n            driver = webdriver.Chrome(service=service, options=options)\n    \n        try:\n            with allure.step(\"Open jQuery UI Droppable page\"):\n                driver.maximize_window()\n                driver.get(\"https://jqueryui.com/droppable/\")\n                allure.attach(driver.title, name=\"Page Title\", attachment_type=allure.attachment_type.TEXT)\n                _attach_screenshot(driver, \"Initial Page\")\n    \n            with allure.step(\"Switch to iframe containing draggable elements\"):\n                iframe = driver.find_element(By.CLASS_NAME, \"demo-frame\")\n                driver.switch_to.frame(iframe)\n    \n            with allure.step(\"Locate draggable and droppable elements\"):\n                source = driver.find_element(By.ID, \"draggable\")\n                target = driver.find_element(By.ID, \"droppable\")\n    \n            with allure.step(\"Perform drag and drop action\"):\n                actions = ActionChains(driver)\n>               actions.drag_and_drop(source, target).perform()\n\ntest_dragdrop.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:93: in perform\n    self.w3c_actions.perform()\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:168: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001767CA4F290>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"move target out of bounds\",\"message\":\"move target out of bounds\\\\n  (Sess...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x77bad1ab+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\nE         (Session info: chrome=138.0.7204.50)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x904493+62419]\nE       \tGetHandleVerifier [0x0x9044d4+62484]\nE       \t(No symbol) [0x0x741f90]\nE       \t(No symbol) [0x0x7d8f51]\nE       \t(No symbol) [0x0x7af46c]\nE       \t(No symbol) [0x0x7d087a]\nE       \t(No symbol) [0x0x7af266]\nE       \t(No symbol) [0x0x77e852]\nE       \t(No symbol) [0x0x77f6f4]\nE       \tGetHandleVerifier [0x0xb74773+2619059]\nE       \tGetHandleVerifier [0x0xb6fb8a+2599626]\nE       \tGetHandleVerifier [0x0x92b03a+221050]\nE       \tGetHandleVerifier [0x0x91b2b8+156152]\nE       \tGetHandleVerifier [0x0x921c6d+183213]\nE       \tGetHandleVerifier [0x0x90c378+94904]\nE       \tGetHandleVerifier [0x0x90c502+95298]\nE       \tGetHandleVerifier [0x0x8f765a+9626]\nE       \tBaseThreadInitThunk [0x0x76725d49+25]\nE       \tRtlInitializeExceptionChain [0x0x77bad1ab+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: MoveTargetOutOfBoundsException","steps":[{"name":"Setup Chrome WebDriver","time":{"start":1751621208021,"stop":1751621209342,"duration":1321},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Open jQuery UI Droppable page","time":{"start":1751621209342,"stop":1751621210746,"duration":1404},"status":"passed","steps":[],"attachments":[{"uid":"298f1dd6f9c02516","name":"Page Title","source":"298f1dd6f9c02516.txt","type":"text/plain","size":21},{"uid":"b3b906cd07798d83","name":"Initial Page","source":"b3b906cd07798d83.png","type":"image/png","size":55011}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":0,"attachmentStep":false,"hasContent":true},{"name":"Switch to iframe containing draggable elements","time":{"start":1751621210746,"stop":1751621210811,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Locate draggable and droppable elements","time":{"start":1751621210811,"stop":1751621210847,"duration":36},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Perform drag and drop action","time":{"start":1751621210847,"stop":1751621210931,"duration":84},"status":"broken","statusMessage":"selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\n  (Session info: chrome=138.0.7204.50)\nStacktrace:\n\tGetHandleVerifier [0x0x904493+62419]\n\tGetHandleVerifier [0x0x9044d4+62484]\n\t(No symbol) [0x0x741f90]\n\t(No symbol) [0x0x7d8f51]\n\t(No symbol) [0x0x7af46c]\n\t(No symbol) [0x0x7d087a]\n\t(No symbol) [0x0x7af266]\n\t(No symbol) [0x0x77e852]\n\t(No symbol) [0x0x77f6f4]\n\tGetHandleVerifier [0x0xb74773+2619059]\n\tGetHandleVerifier [0x0xb6fb8a+2599626]\n\tGetHandleVerifier [0x0x92b03a+221050]\n\tGetHandleVerifier [0x0x91b2b8+156152]\n\tGetHandleVerifier [0x0x921c6d+183213]\n\tGetHandleVerifier [0x0x90c378+94904]\n\tGetHandleVerifier [0x0x90c502+95298]\n\tGetHandleVerifier [0x0x8f765a+9626]\n\tBaseThreadInitThunk [0x0x76725d49+25]\n\tRtlInitializeExceptionChain [0x0x77bad1ab+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x77bad131+561]\n\n","statusTrace":"  File \"C:\\Users\\HP\\Downloads\\New folder\\test_dragdrop.py\", line 46, in test_drag_and_drop\n    actions.drag_and_drop(source, target).perform()\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py\", line 93, in perform\n    self.w3c_actions.perform()\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py\", line 168, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":true},{"name":"Close browser","time":{"start":1751621211037,"stop":1751621213241,"duration":2204},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":6,"attachmentStep":false,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"suite","value":"test_dragdrop"},{"name":"host","value":"GP"},{"name":"thread","value":"4432-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_dragdrop"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"7ac961872d8ef175.json","parameterValues":[]}